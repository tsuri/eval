* Development Log
** Week 1
  - initial bazel setup for go, protobufs, docker and kubernetes rules
  - setup of a local kubernetes cluster using kind
  - beginning of a engine service, using gRPC
  - beginning of evalctl
  - beginning of grunt, the executor
  - add storage to the cluster (we have
    host /data/cluster
    mounted as /data in workers and
    made visible as /data to pods)
  - add an ingress to kind cluster
    given up on ambassador, nginx work fine (althouh in retrospect it might have been me
    trying to pass through non-standard ports in 'kind' without touching the configuration
    of ambassador. Anyhow, nginx now works w/ port 80 and 443
  - dashboard
  - make a single command to deploy all services. Either bazel or a script. Done, bazel "//:eval.apply" target
  - added a nodejs client tha shows that mTLS and ingress do work. This was one random setup I got from the
    intertubes. Why the golang client doesn't work is still a mistery

** Week 2
  - Two days beyond schedule and a lot of misery. The nodejs client kept working. The go client kept not working.
    As they say for telescopes, the best way to build a 10" telescope is to build a 5" telescope first, so I started from the basic principles:
    - wrote a small server/client pair with no authentication
    - modified to use server-side certificates
    - modified to use it for mTLS
    - wrote my own CA and certificate creation scripts (well, using certstrap, openssl becomes annoying fast)
    - bought gRPC up and running
    All of this was fine and dandy, but behind an nginx ingress, still no dice. Then I saw by accident these two lines in
    a configuration for ks8 ingresses somebody posted somewhere:

    nginx.ingress.kubernetes.io/ssl-passthrough: "true"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"

    And this did it!!!

    Now let's recoup the lost time. It is Tue night. I still have 3 days. I hope to get the grunt squad up and running (which will require
    in cluster communication w/ mTLS and possibly run a golang wrapper invoking a python main. Both will be initially rather empty but they'll be
    he most beautiful empty pieces of software.

    I'm keeping running:
    bazel run cmd/evalctl:evalctl  -- eval 1000
    INFO: Invocation ID: 0e4e910e-b1a4-4f24-8640-0569c3d8d1fe
    INFO: Analyzed target //cmd/evalctl:evalctl (0 packages loaded, 0 targets configured).
    INFO: Found 1 target...
    Target //cmd/evalctl:evalctl up-to-date:
      bazel-bin/cmd/evalctl/evalctl_/evalctl
    INFO: Elapsed time: 0.117s, Critical Path: 0.00s
    INFO: 1 process: 1 internal.
    INFO: Build completed successfully, 1 total action
    INFO: Build completed successfully, 1 total action
    Eval 1000
    2022/03/22 23:11:59 Response from server: %!s(int64=1002)

    ok, the server just add 2 to the number it receives. Not very interesting, I admit.

* TODO
  - rename grunt to grunt-squad
  - add a cache service
  - separate proto bufs
  - verify nginx ingress with gRPC traffic to actual services instead of the demo deployments. Usual TLS problems
  - document 'go get github.com/hidetatz/kubecolor/cmd/kubecolor'

* TOCONSIDER
  - grafana: https://grafana.com/grafana/plugins/grafana-kubernetes-app/
  - k8s golang framework: https://github.com/openfaas/faas
  - kv store: https://github.com/dgraph-io/badger
  - golang kit: https://github.com/go-kit/kit (examples: https://github.com/go-kit/examples)
  - ML: https://platform9.com/blog/kubernetes-for-machine-learning/
  - https://nickjanetakis.com/blog/configuring-a-kind-cluster-with-nginx-ingress-using-terraform-and-helm
  - kind, grpc, nginx: https://github.com/mahendrabagul/golang2021-meetup
  - certificates: https://cert-manager.io/docs/configuration/selfsigned/
  - https://agrimprasad.com/post/supercharge-kubernetes-setup/
  - https://github.com/derailed/popeye
  - https://github.com/wercker/stern
  - https://loft.sh/blog/kubernetes-nginx-ingress-10-useful-configuration-options/
  - This looks much better than the kubernetes rules: https://github.com/adobe/rules_gitops
  - https://blog.pilosus.org/posts/2019/05/26/k8s-ingress-troubleshooting/
  - https://ddcode.net/2019/06/30/bring-in-grpc-ca-based-tls-certificate-authentication/
  - https://go.dev/src/crypto/tls/generate_cert.go#L126
  - credential creation: https://youngkin.github.io/post/gohttpsclientserver/
  - mTLS https://www.handracs.info/blog/grpcmtlsgo/
