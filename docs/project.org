* Week 1
  - initial bazel setup for go, protobufs, docker and kubernetes rules
  - setup of a local kubernetes cluster using kind
  - beginning of a engine service, using gRPC
  - beginning of evalctl
  - beginning of grunt, the executor
  - add storage to the cluster (we have
    host /data/cluster
    mounted as /data in workers and
    made visible as /data to pods)
  - add an ingress to kind cluster
    given up on ambassador, nginx work fine (althouh in retrospect it might have been me
    trying to pass through non-standard ports in 'kind' without touching the configuration
    of ambassador. Anyhow, nginx now works w/ port 80 and 443

* TODO
  - make a single command to deploy all services. Either bazel or a script.
  - rename grunt to grunt-squad
  - add a cache service
  - separate proto bufs
  - verify nginx ingress with gRPC traffic to actual services instead of the demo deployments. Usual TLS problems
  - document 'go get github.com/hidetatz/kubecolor/cmd/kubecolor'

* TOCONSIDER
  - grafana: https://grafana.com/grafana/plugins/grafana-kubernetes-app/
  - k8s golang framework: https://github.com/openfaas/faas
  - kv store: https://github.com/dgraph-io/badger
  - golang kit: https://github.com/go-kit/kit (examples: https://github.com/go-kit/examples)
  - ML: https://platform9.com/blog/kubernetes-for-machine-learning/
  - https://nickjanetakis.com/blog/configuring-a-kind-cluster-with-nginx-ingress-using-terraform-and-helm
  - kind, grpc, nginx: https://github.com/mahendrabagul/golang2021-meetup
  - certificates: https://cert-manager.io/docs/configuration/selfsigned/
  - https://agrimprasad.com/post/supercharge-kubernetes-setup/
  - https://github.com/derailed/popeye
  - https://github.com/wercker/stern
  - https://loft.sh/blog/kubernetes-nginx-ingress-10-useful-configuration-options/
  - This looks much better than the kubernetes rules: https://github.com/adobe/rules_gitops
  - https://blog.pilosus.org/posts/2019/05/26/k8s-ingress-troubleshooting/
  - https://ddcode.net/2019/06/30/bring-in-grpc-ca-based-tls-certificate-authentication/
  - https://go.dev/src/crypto/tls/generate_cert.go#L126
