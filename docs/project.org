* Development Log
** Week 1
  - initial bazel setup for go, protobufs, docker and kubernetes rules
  - setup of a local kubernetes cluster using kind
  - beginning of a engine service, using gRPC
  - beginning of evalctl
  - beginning of grunt, the executor
  - add storage to the cluster (we have
    host /data/cluster
    mounted as /data in workers and
    made visible as /data to pods)
  - add an ingress to kind cluster
    given up on ambassador, nginx work fine (althouh in retrospect it might have been me
    trying to pass through non-standard ports in 'kind' without touching the configuration
    of ambassador. Anyhow, nginx now works w/ port 80 and 443
  - dashboard
  - make a single command to deploy all services. Either bazel or a script. Done, bazel "//:eval.apply" target
  - added a nodejs client tha shows that mTLS and ingress do work. This was one random setup I got from the
    intertubes. Why the golang client doesn't work is still a mistery

** Week 2
  - Two days beyond schedule and a lot of misery. The nodejs client kept working. The go client kept not working.
    As they say for telescopes, the best way to build a 10" telescope is to build a 5" telescope first, so I started from the basic principles:
    - wrote a small server/client pair with no authentication
    - modified to use server-side certificates
    - modified to use it for mTLS
    - wrote my own CA and certificate creation scripts (well, using certstrap, openssl becomes annoying fast)
    - bought gRPC up and running
    All of this was fine and dandy, but behind an nginx ingress, still no dice. Then I saw by accident these two lines in
    a configuration for ks8 ingresses somebody posted somewhere:

    nginx.ingress.kubernetes.io/ssl-passthrough: "true"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"

    And this did it!!!

    Now let's recoup the lost time. It is Tue night. I still have 3 days. I hope to get the grunt squad up and running (which will require
    in cluster communication w/ mTLS and possibly run a golang wrapper invoking a python main. Both will be initially rather empty but they'll be
    he most beautiful empty pieces of software.

    I'm keeping running:
    bazel run cmd/evalctl:evalctl  -- eval 1000
    INFO: Invocation ID: 0e4e910e-b1a4-4f24-8640-0569c3d8d1fe
    INFO: Analyzed target //cmd/evalctl:evalctl (0 packages loaded, 0 targets configured).
    INFO: Found 1 target...
    Target //cmd/evalctl:evalctl up-to-date:
      bazel-bin/cmd/evalctl/evalctl_/evalctl
    INFO: Elapsed time: 0.117s, Critical Path: 0.00s
    INFO: 1 process: 1 internal.
    INFO: Build completed successfully, 1 total action
    INFO: Build completed successfully, 1 total action
    Eval 1000
    2022/03/22 23:11:59 Response from server: %!s(int64=1002)

    ok, the server just add 2 to the number it receives. Not very interesting, I admit.

    added a 'grunt' service. Now 'engine' forwards a number to
    'grunt', grunt adds 1000 and then engine further adds 1. Hence
    eval 1 --> 1002

    Some cleanup. Too tired for anything serious.

    Almost got gitea working in-cluster, using the external /data/eval
    directory and allowing access through the ingress. Still need to
    configure it from outside (app.ini) and to get to actually
    pushing/pulling from both cluster and laptop. Ok, not almost
    working, but it is Friday night, sue me.

    Kind of work now with `GIT_SSL_NO_VERIFY=true  git push cluster
    main` and after changing the max body size to 10 MB.

    This works in cluster now:
    git clone  http://gitea-service.gitea-repo.svc.cluster.local:3000/mav/eval.git

    Really need to solve certificates (for the web dashboard, not
    critical) and SSH keys (for cluster access, from laptops is
    complicated due to kind ports and nginx ingress (see
    https://stackoverflow.com/questions/66367867/how-to-expose-port-22-via-nginx-ingress-controller)

    We can create a build context for kanico very fast, so let's not
    worry about this at all:
    #+begin_src sh
      time git clone --depth 1 --branch main --single-branch  http://gitea-service.gitea-repo.svc.cluster.local:3000/mav/eval.git
      Cloning into 'eval'...
      remote: Enumerating objects: 79, done.
      remote: Counting objects: 100% (79/79), done.
      remote: Compressing objects: 100% (71/71), done.
      remote: Total 79 (delta 6), reused 54 (delta 1), pack-reused 0
      Unpacking objects: 100% (79/79), 71.23 KiB | 3.56 MiB/s, done.

      real	0m0.058s
      user	0m0.021s
      sys	0m0.023s
    #+end_src

    Gitea access w/ token. Name has to be new:
    #+begin_src sh
      curl -XPOST -H "Content-Type: application/json"  -k -d '{"name":"test2"}' -u mav https://gitea.eval.net/api/v1/users/mav/tokens
    #+end_src
    We can then save the token in a secret to be used by anybody

HUGE. Worked on Saturday and Sunday (which I promised to myself I
wouldn't do; this project is strictly
a on-the-couch-pretending-to-watch-tv evening project), but:
- I was accumulating delays
- Wife has been working on grants
But now we got a working kaniko producing images from within the
cluster that are then pushed to the external docker registry (running
as a docker container, but outside of the kind cluster). The same
image can then be used by the kubelet to instantiate k8s pods.
Still need to look at actually running bazel inside a kaniko container
and turn the kaniko one-job pod into an image build service.

** Week 3
*** Monday
- added a 'builder' service (for now using the grunt protobuf :-) )
- added RBAC and a role w permission to list pods. Later we'll create
  and track kaniko pods for creating images.
- added code for listing pods. Just a demo, but shows how to
  successfully interact with the kubernetes API server. Works, Aye!
  [and, btw, we have at the moment 22 pods on our poor kind local
  cluster]
*** Tuesday
Not much accomplished
- beginning of a redis deployment. Works by running redis-cli inside
  the pod, but still cannot be reached from the builder service.
- problem was service DNS .cluster.local not local.net. Still
  authentication problems, but getting closer
- working now with no password, this will do for a PoC.
*** Wednesday
Even less accomplished than yesterday. Basically passing host and
username and prevent execution of evalctl as root. Meh.

And the celebA dataset at
https://drive.google.com/drive/folders/0B7EVK8r0v71pWEZsZE9oNnFzTm8?resourcekey=0-5BR16BdXnb8hVj6CNHKzLg

*** Thusday
This entire week is not well. Just created images with kaniko that I
can successfully run in cluster. For now he runner process runs a
subprocess with both in golang. I tried to  have the second in python,
which would be more realistic and useful for using some OSS ML
example, unsuccesfully. I suspect similar problems if I had some
`data` for the golang processes. Will keep trying.

*** Friday
Some refactoring
rabbitmq deployment, localhost->cluster port pssthrough, confirmed working
confirmed kaniko works with git conext inclusing branch and commit sha
pre-bake a debian build image (including bazel) to be used by kaniko
(script/images builds it). A build takes now 1:30 min, tolerable for a demo.
Installed rabtab (set export
RABTAP_APIURI=http://guest:guest@localhost:15672/api)

* TODO
  - see if a single instance rabbitmq deployment works
  - build images and place them in the registry (for istance the
    buider one with bazel takes a long time in kaniko)
  - create small golang images w/ kaniko
  - launch kaniko from the buider service
  - cannot explain why the redis DB persists on pod restart. It is
    what I want, but not what I expect from the current setup
  - rename grunt to grunt-squad
  - add a cache service
  - separate proto bufs for different services
  - document 'go get github.com/hidetatz/kubecolor/cmd/kubecolor'
  - gitea certificates for dashboard
  - gitea SSH keys
  - move registry storage to disk, /data/eval/registry

* TOCONSIDER
  - https://github.com/go-chi/chi (gitea switchig to it)
  - grafana: https://grafana.com/grafana/plugins/grafana-kubernetes-app/
  - k8s golang framework: https://github.com/openfaas/faas
  - kv store: https://github.com/dgraph-io/badger
  - golang kit: https://github.com/go-kit/kit (examples: https://github.com/go-kit/examples)
  - ML: https://platform9.com/blog/kubernetes-for-machine-learning/
  - https://nickjanetakis.com/blog/configuring-a-kind-cluster-with-nginx-ingress-using-terraform-and-helm
  - kind, grpc, nginx: https://github.com/mahendrabagul/golang2021-meetup
  - certificates: https://cert-manager.io/docs/configuration/selfsigned/
  - https://agrimprasad.com/post/supercharge-kubernetes-setup/
  - https://github.com/derailed/popeye
  - https://github.com/wercker/stern
  - https://loft.sh/blog/kubernetes-nginx-ingress-10-useful-configuration-options/
  - This looks much better than the kubernetes rules: https://github.com/adobe/rules_gitops
  - https://blog.pilosus.org/posts/2019/05/26/k8s-ingress-troubleshooting/
  - https://ddcode.net/2019/06/30/bring-in-grpc-ca-based-tls-certificate-authentication/
  - https://go.dev/src/crypto/tls/generate_cert.go#L126
  - credential creation: https://youngkin.github.io/post/gohttpsclientserver/
  - mTLS https://www.handracs.info/blog/grpcmtlsgo/
  - https://docs.buf.build/lint/usage
  - https://github.com/taskctl/taskctl/blob/master/cmd/taskctl/graph.go
  - https://github.com/maxcnunes/gaper/blob/master/runner.go
  - https://github.com/go-gilbert/gilbert
  - https://github.com/goyek/goyek
  - https://github.com/vectaport/flowgraph
  - https://github.com/chrislusf/gleam
  - https://github.com/andy2046/failured
  - https://github.com/go-kratos/kratos
  - https://github.com/sagikazarmark/modern-go-application
  - https://stackoverflow.com/questions/66367867/how-to-expose-port-22-via-nginx-ingress-controller
  - https://github.com/sdboyer/gogl
  - https://github.com/vardius/go-api-boilerplate
  - https://pygop.readthedocs.io/en/latest/tutorials/mini-celebA-example.html
  - https://yanzhaowu.me/GTDLBench/datasets/celeba_dataset/
  - https://goodboychan.github.io/python/coursera/tensorflow_probability/icl/2021/09/14/03-Variational-AutoEncoder-Celeb-A.html
  - https://arxiv.org/pdf/2008.05248.pdf
  - https://www.ics.uci.edu/~cs223/papers/cidr07p15.pdf
  - https://www.linkedin.com/pulse/micro-services-architecture-long-running-processes-nethaji-chapala/https://www.linkedin.com/pulse/micro-services-architecture-long-running-processes-nethaji-chapala/
  - https://medium.com/@dean15198/long-running-tasks-in-microservices-architecture-568c204da75e
  - https://docs.firstdecode.com/microservices-architecture-style/asynchronous-microservices/
      - https://github.com/go-kit/examples/blob/master/addsvc/cmd/addcli/addcli.go
      - https://www.youtube.com/watch?v=Z_yD7YPL2oE
      - https://github.com/apssouza22/grpc-production-go/blob/master/server/server.go
      - https://zipkin.io/
      - https://github.com/AleksK1NG/Go-gRPC-RabbitMQ-microservice
** Backend Services
- https://github.com/lileio/lile
- https://github.com/tokopedia/gripmock
- https://github.com/ThreeDotsLabs/watermill
- https://github.com/fieldryand/goflow VIP
- https://github.com/opencord/voltha-lib-go/blob/master/pkg/grpc/server.go
  VIP lot of separate libraries in voltha-lib
- https://github.com/digota/digota full production ready service
  (ecommerce, but stil there should be good stuff)
- https://github.com/C2FO/vfs
- https://github.com/parsyl/parquet
- https://github.com/joomcode/errorx
*** Framework / Starting kits
- https://github.com/mikestefanello/pagoda
- https://github.com/zeromicro/go-zero
*** Caching
- https://github.com/eko/gocache
- https://github.com/dgraph-io/ristretto
** Frontend / UI
- https://www.digitalocean.com/community/tutorials/how-to-build-an-infinite-scroll-image-gallery-with-react-css-grid-and-unsplash
- https://www.youtube.com/watch?v=hahZGMIhqkY
- https://bulma.io/documentation/elements/title/

** Recommended Projects to learn from
- https://github.com/golang/groupcache
- https://github.com/mattermost/mattermost-server
- https://github.com/dgraph-io/dgraph
