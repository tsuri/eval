* Development Log
** Week 1
  - initial bazel setup for go, protobufs, docker and kubernetes rules
  - setup of a local kubernetes cluster using kind
  - beginning of a engine service, using gRPC
  - beginning of evalctl
  - beginning of grunt, the executor
  - add storage to the cluster (we have
    host /data/cluster
    mounted as /data in workers and
    made visible as /data to pods)
  - add an ingress to kind cluster
    given up on ambassador, nginx work fine (althouh in retrospect it might have been me
    trying to pass through non-standard ports in 'kind' without touching the configuration
    of ambassador. Anyhow, nginx now works w/ port 80 and 443
  - dashboard
  - make a single command to deploy all services. Either bazel or a script. Done, bazel "//:eval.apply" target
  - added a nodejs client tha shows that mTLS and ingress do work. This was one random setup I got from the
    intertubes. Why the golang client doesn't work is still a mistery

** Week 2
  - Two days beyond schedule and a lot of misery. The nodejs client kept working. The go client kept not working.
    As they say for telescopes, the best way to build a 10" telescope is to build a 5" telescope first, so I started from the basic principles:
    - wrote a small server/client pair with no authentication
    - modified to use server-side certificates
    - modified to use it for mTLS
    - wrote my own CA and certificate creation scripts (well, using certstrap, openssl becomes annoying fast)
    - bought gRPC up and running
    All of this was fine and dandy, but behind an nginx ingress, still no dice. Then I saw by accident these two lines in
    a configuration for ks8 ingresses somebody posted somewhere:

    nginx.ingress.kubernetes.io/ssl-passthrough: "true"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"

    And this did it!!!

    Now let's recoup the lost time. It is Tue night. I still have 3 days. I hope to get the grunt squad up and running (which will require
    in cluster communication w/ mTLS and possibly run a golang wrapper invoking a python main. Both will be initially rather empty but they'll be
    he most beautiful empty pieces of software.

    I'm keeping running:
    bazel run cmd/evalctl:evalctl  -- eval 1000
    INFO: Invocation ID: 0e4e910e-b1a4-4f24-8640-0569c3d8d1fe
    INFO: Analyzed target //cmd/evalctl:evalctl (0 packages loaded, 0 targets configured).
    INFO: Found 1 target...
    Target //cmd/evalctl:evalctl up-to-date:
      bazel-bin/cmd/evalctl/evalctl_/evalctl
    INFO: Elapsed time: 0.117s, Critical Path: 0.00s
    INFO: 1 process: 1 internal.
    INFO: Build completed successfully, 1 total action
    INFO: Build completed successfully, 1 total action
    Eval 1000
    2022/03/22 23:11:59 Response from server: %!s(int64=1002)

    ok, the server just add 2 to the number it receives. Not very interesting, I admit.

    added a 'grunt' service. Now 'engine' forwards a number to
    'grunt', grunt adds 1000 and then engine further adds 1. Hence
    eval 1 --> 1002

    Some cleanup. Too tired for anything serious.

    Almost got gitea working in-cluster, using the external /data/eval
    directory and allowing access through the ingress. Still need to
    configure it from outside (app.ini) and to get to actually
    pushing/pulling from both cluster and laptop. Ok, not almost
    working, but it is Friday night, sue me.

    Kind of work now with `GIT_SSL_NO_VERIFY=true  git push cluster
    main` and after changing the max body size to 10 MB.

    This works in cluster now:
    git clone  http://gitea-service.gitea-repo.svc.cluster.local:3000/mav/eval.git

    Really need to solve certificates (for the web dashboard, not
    critical) and SSH keys (for cluster access, from laptops is
    complicated due to kind ports and nginx ingress (see
    https://stackoverflow.com/questions/66367867/how-to-expose-port-22-via-nginx-ingress-controller)

    We can create a build context for kanico very fast, so let's not
    worry about this at all:
    #+begin_src sh
      time git clone --depth 1 --branch main --single-branch  http://gitea-service.gitea-repo.svc.cluster.local:3000/mav/eval.git
      Cloning into 'eval'...
      remote: Enumerating objects: 79, done.
      remote: Counting objects: 100% (79/79), done.
      remote: Compressing objects: 100% (71/71), done.
      remote: Total 79 (delta 6), reused 54 (delta 1), pack-reused 0
      Unpacking objects: 100% (79/79), 71.23 KiB | 3.56 MiB/s, done.

      real	0m0.058s
      user	0m0.021s
      sys	0m0.023s
    #+end_src

    Gitea access w/ token. Name has to be new:
    #+begin_src sh
      curl -XPOST -H "Content-Type: application/json"  -k -d '{"name":"test2"}' -u mav https://gitea.eval.net/api/v1/users/mav/tokens
    #+end_src
    We can then save the token in a secret to be used by anybody

HUGE. Worked on Saturday and Sunday (which I promised to myself I
wouldn't do; this project is strictly
a on-the-couch-pretending-to-watch-tv evening project), but:
- I was accumulating delays
- Wife has been working on grants
But now we got a working kaniko producing images from within the
cluster that are then pushed to the external docker registry (running
as a docker container, but outside of the kind cluster). The same
image can then be used by the kubelet to instantiate k8s pods.
Still need to look at actually running bazel inside a kaniko container
and turn the kaniko one-job pod into an image build service.

** Week 3
*** Monday
- added a 'builder' service (for now using the grunt protobuf :-) )
- added RBAC and a role w permission to list pods. Later we'll create
  and track kaniko pods for creating images.
- added code for listing pods. Just a demo, but shows how to
  successfully interact with the kubernetes API server. Works, Aye!
  [and, btw, we have at the moment 22 pods on our poor kind local
  cluster]
*** Tuesday
Not much accomplished
- beginning of a redis deployment. Works by running redis-cli inside
  the pod, but still cannot be reached from the builder service.
- problem was service DNS .cluster.local not local.net. Still
  authentication problems, but getting closer
- working now with no password, this will do for a PoC.
*** Wednesday
Even less accomplished than yesterday. Basically passing host and
username and prevent execution of evalctl as root. Meh.

And the celebA dataset at
https://drive.google.com/drive/folders/0B7EVK8r0v71pWEZsZE9oNnFzTm8?resourcekey=0-5BR16BdXnb8hVj6CNHKzLg

*** Thusday
This entire week is not well. Just created images with kaniko that I
can successfully run in cluster. For now he runner process runs a
subprocess with both in golang. I tried to  have the second in python,
which would be more realistic and useful for using some OSS ML
example, unsuccesfully. I suspect similar problems if I had some
`data` for the golang processes. Will keep trying.

*** Friday
Some refactoring
rabbitmq deployment, localhost->cluster port pssthrough, confirmed working
confirmed kaniko works with git conext inclusing branch and commit sha
pre-bake a debian build image (including bazel) to be used by kaniko
(script/images builds it). A build takes now 1:30 min, tolerable for a demo.
Installed rabtab (set export
RABTAP_APIURI=http://guest:guest@localhost:15672/api)
** Week 4
Nothing is a good approximation of what I've accomplished, just too
tired from work to do anything at night.
I have just monkeyed around with opentelemetry without getting to
nything actually working. Totally not necessary for a demo, but
there's the learning factor, so...

*** Friday
<2022-04-08 Fri> discovered https://github.com/grailbio/reflow. Rather
similar to what I have in mind.

** Week 5
Nothing is a precise description. Way too tired, not even opened my
laptop.

** Week 6
*** Monday
Refactored server so that we cn have reusable code for multiple
services. Still works need to be done, but at least we have a place
where to add functionality (graceful termination, rate limiting,
metrics, etc)
*** Tuesday
A bit of cleanup of logging.
Added hot reloading of config (required new version of viper because
of fsnotify import change).
*** Wednesday
Started using go-git to get status of wortree extract branch name and
commit sha to be passed to 'image build'

More substantial refactoring. Now logging and config is set up by the
framework. Still need to figure out how to tell the app that config
has changed. Close to be willing to setup a real build service :happy:

*** Thusday
Added a builder proto, added a builder service implementation.
For some reason my client library doesn't return error properly when
the builder endpoint was not found ('eval-build' instead of
'eval-builder', should have been a DNS error). Left comments in the
code. This made me chase ghosts for the entire evening. Rats!

*** Friday
Not much. Looked around for a decent task queue in golang, backed up
by redis. Or maybe we end up using rabbitmq.

Played with a couple asynq ended up working, I can create and handle
tasks. I've also configured a dashboard at asynqmon.eval.net, the
nginx ingres is magic. Very cool. Took no time. It was on Saturday,
      but I was otherwise busy with gardeners woring in my backyard.

** Week 7
Another bummer week of nothingness. 

** Week 8
*** Monday
Nothing that I remember the day after, probably some small refactoring
*** Tuesday
evalctl image build sends  request to 'engine' (will become a generic
gateway over time); 'engine' forwards it to 'builder' that enqueue and
services build tasks in asynq.
Things to do:
- mount a dockerfile so that we can obey the bazel targets that are
  lready passed.
- handle errors
- stream status updates
- specify image name and tag (tied to the dockerfile point above)
- return info about the image (probably part of actually implement the
  caching portion)
*** Wednesday
TIL:
For example, setting the flag to
--digest-file=/dev/termination-log will write the digest to that file,
which is picked up by Kubernetes automatically as the
{{.state.terminated.message}} of the container.
[in the context of kaniko, but should be a general thing]

Good progress w/ the builder. We're now passing and using the bazel
targets. We now need to pass the tag we want to use and we should be
ok.

#+begin_src ditaa :file ditaa-simpleboxes.png
  +---------+
  |         |
  | Foo     |
  |         |
  +----+----+---+
  |Bar |Baz     |
  |    |        |
  +----+--------+
#+end_src

#+RESULTS:
[[file:ditaa-simpleboxes.png]]

* Tasks
** DONE build base images and place them in the registry (for istance the
    buider one with bazel takes a long time in kaniko)
** TODO rename grunt to something better, anything
** TODO add a cache service
** TODO move registry storage to disk, /data/eval/registry
** TODO cannot explain why the redis DB persists on pod restart. It is
    what I want, but not what I expect from the current setup
** TODO document 'go get github.com/hidetatz/kubecolor/cmd/kubecolor'
** TODO separate asynq queue for builder and other services



* TOCONSIDER
  - https://github.com/sourcegraph/starlight
  - https://github.com/h3poteto/kube-job/tree/master/pkg/job (VIP golang k8s jobs)
  - https://github.com/go-chi/chi (gitea switchig to it)
  - grafana: https://grafana.com/grafana/plugins/grafana-kubernetes-app/
  - k8s golang framework: https://github.com/openfaas/faas
  - kv store: https://github.com/dgraph-io/badger
  - golang kit: https://github.com/go-kit/kit (examples: https://github.com/go-kit/examples)
  - ML: https://platform9.com/blog/kubernetes-for-machine-learning/
  - https://nickjanetakis.com/blog/configuring-a-kind-cluster-with-nginx-ingress-using-terraform-and-helm
  - kind, grpc, nginx: https://github.com/mahendrabagul/golang2021-meetup
  - certificates: https://cert-manager.io/docs/configuration/selfsigned/
  - https://agrimprasad.com/post/supercharge-kubernetes-setup/
  - https://github.com/derailed/popeye
  - https://github.com/wercker/stern
  - https://loft.sh/blog/kubernetes-nginx-ingress-10-useful-configuration-options/
  - This looks much better than the kubernetes rules: https://github.com/adobe/rules_gitops
  - https://blog.pilosus.org/posts/2019/05/26/k8s-ingress-troubleshooting/
  - https://ddcode.net/2019/06/30/bring-in-grpc-ca-based-tls-certificate-authentication/
  - https://go.dev/src/crypto/tls/generate_cert.go#L126
  - credential creation: https://youngkin.github.io/post/gohttpsclientserver/
  - mTLS https://www.handracs.info/blog/grpcmtlsgo/
  - https://docs.buf.build/lint/usage
  - https://github.com/taskctl/taskctl/blob/master/cmd/taskctl/graph.go
  - https://github.com/maxcnunes/gaper/blob/master/runner.go
  - https://github.com/go-gilbert/gilbert
  - https://github.com/goyek/goyek
  - https://github.com/vectaport/flowgraph
  - https://github.com/chrislusf/gleam
  - https://github.com/andy2046/failured
  - https://github.com/go-kratos/kratos
  - https://github.com/sagikazarmark/modern-go-application
  - https://stackoverflow.com/questions/66367867/how-to-expose-port-22-via-nginx-ingress-controller
  - https://github.com/sdboyer/gogl
  - https://github.com/vardius/go-api-boilerplate
  - https://pygop.readthedocs.io/en/latest/tutorials/mini-celebA-example.html
  - https://yanzhaowu.me/GTDLBench/datasets/celeba_dataset/
  - https://goodboychan.github.io/python/coursera/tensorflow_probability/icl/2021/09/14/03-Variational-AutoEncoder-Celeb-A.html
  - https://arxiv.org/pdf/2008.05248.pdf
  - https://www.ics.uci.edu/~cs223/papers/cidr07p15.pdf
  - https://www.linkedin.com/pulse/micro-services-architecture-long-running-processes-nethaji-chapala/https://www.linkedin.com/pulse/micro-services-architecture-long-running-processes-nethaji-chapala/
  - https://medium.com/@dean15198/long-running-tasks-in-microservices-architecture-568c204da75e
  - https://docs.firstdecode.com/microservices-architecture-style/asynchronous-microservices/
    - https://github.com/go-kit/examples/blob/master/addsvc/cmd/addcli/addcli.go
    - https://www.youtube.com/watch?v=Z_yD7YPL2oE
    - https://github.com/apssouza22/grpc-production-go/blob/master/server/server.go
    - https://zipkin.io/
    - https://github.com/AleksK1NG/Go-gRPC-RabbitMQ-microservice
    - https://github.com/alenkacz/cert-manager-verifier
** Backend Services
- https://github.com/google/slowjam
- https://github.com/lileio/lile
- https://github.com/tokopedia/gripmock
- https://github.com/ThreeDotsLabs/watermill
- https://github.com/fieldryand/goflow VIP
- https://github.com/opencord/voltha-lib-go/blob/master/pkg/grpc/server.go
  VIP lot of separate libraries in voltha-lib
- https://github.com/digota/digota full production ready service
  (ecommerce, but stil there should be good stuff)
- https://github.com/C2FO/vfs
- https://github.com/parsyl/parquet
- https://github.com/joomcode/errorx
*** Framework / Starting kits
- https://github.com/mikestefanello/pagoda
- https://github.com/zeromicro/go-zero
*** Caching
- https://github.com/eko/gocache
- https://github.com/dgraph-io/ristretto
** Frontend / UI
- https://www.digitalocean.com/community/tutorials/how-to-build-an-infinite-scroll-image-gallery-with-react-css-grid-and-unsplash
- https://www.youtube.com/watch?v=hahZGMIhqkY
- https://bulma.io/documentation/elements/title/
** Machine Learning
- https://www.youtube.com/watch?v=Z53KkGThFNo
** Type Checking and Compiler Optimizations
- https://www.cs.cmu.edu/afs/cs/project/cmcl/archive/Compiler90.pdf
- https://arxiv.org/pdf/1610.07978.pdf
- https://pdf.sciencedirectassets.com/271600/1-s2.0-S0167642300X00020/1-s2.0-0167642395000216/main.pdf?X-Amz-Security-Token=IQoJb3JpZ2luX2VjEHIaCXVzLWVhc3QtMSJHMEUCIAjyQJboYF6DnVmYEXUTzsn9x8V36toZWaRvLBV0OSVdAiEAxzj35plrU5tBAEuHqCHytP3%2FCSN5bLkVLs9rmLZrtX4q0gQIOxAEGgwwNTkwMDM1NDY4NjUiDPBgiinBFOh6ersTjSqvBIl5zITiPAkX26s6E0Ir5SJeNfDkyvkYNLhwsOdJMVtJds6vBUS5BdP2wCpwso4eV0NFolM9d1PCjGhAppY87ITFNUHg18bE6uMhxGGjeF3LffcD9yZOYsvjXkqknhb15XxP7RB0rkC%2B4jYxONMtLozKLc4kmyVbp9rg91%2BE7WJTzCv3RMjygvcwD4augdtFgv%2BqKr3y6UdhywBXhk9cE9xSi%2BGtpPotyGgRRxJrsSNAvULyJeaz8rMgJg7L7eBUUSYYJQBE7cFArOJCuf%2FaGpVi%2FytUC9kiq5yID6gzo35xSmsEucGPsEWnSSJzs03dr5W%2BLnAUdoAPi5Ptf3k%2Fby2Im95KcEpOkvCxpHiUN%2B6JNTBTFLXw3GvcaM43zINbvHhmI%2BYnC40iac33%2BiwJSIrRresb%2FhRZv0Mp2LXILfzrKrR3uXVQPtd84lz7Aq0uMEMK3zmlINZJF4g0L2BIDU6trZRo7l9LHcqJl%2F%2FsrWTd5vtol%2FzX1zqOoQ%2FrHn7ErblIKmaWRcidIB3BboZUtUf08r%2BtO3qMGyRisM8nvOTQwJVtMFNy%2FPFo1ZogWKfzNo%2B2l135H%2FvDg24zBj%2BCOxfohMfj60DApt4ctEREdUj76fvbmJEPHEDgRCLKNIQMXCoJ96Lb60LFkKZfOX2GTqTx6Rh2mR1i%2Fow2Fnzn1s3hG%2BhsdnhMkE604g4eAkK0RU%2FMhM3X3qobztzl4TMxafy1ATVx9gxdmJctWbdTMX0wqvO8kwY6qQG20xe8JF3qmrHSvlWiUcBczhLe2MU7MP6U%2FZfF1u2RR0NQDIA5D9lkiOttxs15KJJAnLowLCuh1GGvOPMYrZ%2BYIzV6KNYEYqV3HjQoY8lsj0v3Rl288UO4yhBYUD2WkgpKjua%2BqGxZ%2FFx%2FKu7sCaZ7GSjBlWBOO7lDBt5BiAwN%2Fr9BfTKGoyHZwm2Ejr%2F8CGkpRfStHrag2BfD1aScy83zoqyQECUNrXAh&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Date=20220502T022644Z&X-Amz-SignedHeaders=host&X-Amz-Expires=300&X-Amz-Credential=ASIAQ3PHCVTYSXQ7AC44%2F20220502%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Signature=4e74311e328367bf301e3537c75d8a95ecea5b8e1c6420839d7db863132d7163&hash=8fd336f3e1ab1543c862e3603927f52b5278db3c7fe5dc2a75a96c34801ae318&host=68042c943591013ac2b2430a89b270f6af2c76d8dfd086a07176afe7c76c2c61&pii=0167642395000216&tid=spdf-b0523c19-7a42-410b-ae45-4de410af654e&sid=03c69ad97e3f3449d48b8181e52fb1763b2dgxrqa&type=client&ua=4d55530152575409010352&rr=704d504ffb6657f4
** Documents
- http://ehneilsen.net/notebook/orgExamples/org-examples.html
- https://www.i3s.unice.fr/~malapert/emacs_orgmode.html
** Recommended Projects to learn from
- https://github.com/golang/groupcache
- https://github.com/mattermost/mattermost-server
- https://github.com/dgraph-io/dgraph
** Build
- https://github.com/buildbuddy-io/buildbuddy bazel build event
  protocol
- https://github.com/buildbarn/bb-event-service/tree/master/cmd/bb_event_service
  a discotinued BEP server
** gRPC
- https://dev.bitolog.com/grpc-long-lived-streaming/
- https://blog.tech-fellow.net/2021/04/10/implementing-grpc-auto-reconnect-on-timeout/
** Javascript
- https://js.cytoscape.org/
** golang/cli
- https://golangexample.com/like-grpcurl-and-cobra-had-a-baby/
