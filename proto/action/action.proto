syntax = "proto3";


package action;

import "proto/channel/channel.proto";
import "google/protobuf/any.proto";

option go_package = "eval/proto/action";

message CommitPoint {
  // Name denotes a symbolic commit, whose exact sha will be computed from the list of
  // substitutions. Can be "golden" or "dev" for the demo
  string name            = 1;
  string branch          = 2;
  string commit_sha      = 3;
  string commit_required = 4;
}

message Action {
  string kind                      = 1;		// should be enum of builtin/custom?
  //  string name                  = 2;
  repeated channel.Channel inputs  = 3;
  repeated channel.Channel outputs = 4;

  // 'builtin' actions (for now only build image) won't configure the commit point sha as it is assumed
  // anything would work. Maybe later we'll have a 'min_ci'. Also for builtins, base_image will be fixed and
  // branch will be main/master.
  string base_image                = 5;
  CommitPoint commit_point         = 6;

  string cmd_target                = 8;
  google.protobuf.Any config       = 7;
}

message BuildImageConfig {
  // image_name and image_tag are not really used for hashing
  // We can use it in two ways:
  // 1. we execute a post action that cheapily add a tag
  // 2. we split the build action in two sequential actions, one building the image and one tagging
  //    [this would be the most correct way, in which case we should include image_name,image_tag in the hash]
  string image_name             = 1;
  string image_tag              = 2;

  // base_image and commit_point (branch and commit_sha) are part of the cache hash
  string base_image             = 3;
  CommitPoint commit_point      = 4;

  // bazel_target is not used for hashing but just to check whether a cached
  // value is acceptable
  repeated string bazel_targets = 5;
}

message GenerateConfig {
  string id = 1;
}

message ProcessConfig {
}

message AggregateConfig {
}

message ModelTrainConfig {
}

message AnalyzeConfig {
}

message SummarizeConfig {
}
